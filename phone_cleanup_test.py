#!/usr/bin/env python3
"""
Phone Number Cleanup Test for +919886763496
Focused test to execute phone number cleanup process
"""

import requests
import json
import time
from datetime import datetime
import uuid

# Production backend URL
BASE_URL = "https://budget-planner-backendjuly.onrender.com/api"

class PhoneCleanupTester:
    def __init__(self):
        self.base_url = BASE_URL
        self.session = requests.Session()
        self.access_token = None
        self.user_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, message, details=None):
        """Log test results"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "timestamp": datetime.now().isoformat(),
            "details": details or {}
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}: {message}")
        if details and not success:
            print(f"   Details: {details}")
    
    def make_request(self, method, endpoint, data=None, headers=None, timeout=60):
        """Make HTTP request with error handling"""
        url = f"{self.base_url}{endpoint}"
        default_headers = {"Content-Type": "application/json"}
        
        if self.access_token:
            default_headers["Authorization"] = f"Bearer {self.access_token}"
        
        if headers:
            default_headers.update(headers)
        
        try:
            if method.upper() == "GET":
                response = self.session.get(url, headers=default_headers, timeout=timeout)
            elif method.upper() == "POST":
                response = self.session.post(url, json=data, headers=default_headers, timeout=timeout)
            elif method.upper() == "PUT":
                response = self.session.put(url, json=data, headers=default_headers, timeout=timeout)
            elif method.upper() == "DELETE":
                response = self.session.delete(url, headers=default_headers, timeout=timeout)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            return response
        except requests.exceptions.Timeout:
            print(f"Timeout error for {method} {url}")
            return None
        except requests.exceptions.ConnectionError as e:
            print(f"Connection error for {method} {url}: {e}")
            return None
        except Exception as e:
            print(f"Request error for {method} {url}: {e}")
            return None
    
    def authenticate(self):
        """Authenticate to get access token"""
        print("üîê Authenticating to access phone endpoints...")
        
        # Generate unique test user
        timestamp = int(time.time())
        test_email = f"cleanup_test_{timestamp}@budgetplanner.com"
        test_password = "CleanupTest123!"
        test_username = f"cleanup_test_{timestamp}"
        
        # Test user registration
        registration_data = {
            "email": test_email,
            "password": test_password,
            "username": test_username
        }
        
        response = self.make_request("POST", "/auth/register", registration_data)
        if response and response.status_code == 201:
            data = response.json()
            self.access_token = data.get("access_token")
            self.user_id = data.get("user", {}).get("id")
            print(f"‚úÖ Authentication successful - User ID: {self.user_id}")
            return True
        else:
            print("‚ùå Authentication failed")
            return False
    
    def test_phone_number_cleanup(self):
        """Test cleanup of specific phone number +919886763496 from database"""
        print("\n" + "="*80)
        print("üßπ PHONE NUMBER CLEANUP PROCESS FOR +919886763496")
        print("="*80)
        
        target_phone = "+919886763496"
        
        if not self.access_token:
            print("‚ùå No authentication token available")
            return False
        
        # Step 1: Check if the phone number exists in any user records
        print(f"\nüîç STEP 1: Checking for existing records with phone number: {target_phone}")
        
        response = self.make_request("GET", "/phone/status")
        if response and response.status_code == 200:
            data = response.json()
            current_phone = data.get("phone_number")
            phone_verified = data.get("phone_verified", False)
            
            if current_phone == target_phone:
                self.log_test("Target Phone Found", True, f"Found target phone {target_phone} in current user (verified: {phone_verified})")
                
                # Step 2: Unlink the phone number from user associations
                print(f"\nüîó STEP 2: Unlinking phone number from user associations")
                response = self.make_request("DELETE", "/phone/unlink")
                if response and response.status_code == 200:
                    self.log_test("Phone Number Unlink", True, f"Successfully unlinked {target_phone} from current user")
                else:
                    self.log_test("Phone Number Unlink", False, f"Failed to unlink {target_phone}")
            else:
                self.log_test("Target Phone Check", True, f"Target phone {target_phone} not found in current user (current: {current_phone})")
        else:
            self.log_test("Phone Status Check", False, "Failed to check phone status")
        
        # Step 3: Clear phone verification records by testing fresh verification
        print(f"\nüß™ STEP 3: Testing fresh phone verification flow for {target_phone}")
        phone_data = {"phone_number": target_phone}
        response = self.make_request("POST", "/phone/send-verification", phone_data)
        
        if response and response.status_code == 200:
            data = response.json()
            success = data.get("success", False)
            message = data.get("message", "")
            demo_mode = data.get("demo_mode", False)
            fallback_mode = data.get("fallback_mode", False)
            
            if success:
                if demo_mode or fallback_mode:
                    self.log_test("Fresh Phone Verification", True, f"‚úÖ Phone {target_phone} ready for verification (fallback/demo mode): {message}")
                else:
                    self.log_test("Fresh Phone Verification", True, f"‚úÖ Phone {target_phone} ready for fresh verification via Twilio: {message}")
                
                # Step 4: Verify OTP verification endpoints are working
                print(f"\nüîê STEP 4: Testing OTP verification endpoints for {target_phone}")
                otp_data = {"otp": "123456"}  # Test OTP
                otp_response = self.make_request("POST", "/phone/verify-otp", otp_data)
                
                if otp_response and otp_response.status_code == 400:
                    try:
                        error_data = otp_response.json()
                        error_detail = error_data.get('detail', '')
                        if 'invalid' in error_detail.lower() or 'expired' in error_detail.lower():
                            self.log_test("Fresh OTP Verification Flow", True, f"‚úÖ OTP verification flow working for {target_phone} (invalid OTP expected)")
                        else:
                            self.log_test("Fresh OTP Verification Flow", False, f"‚ùå Unexpected OTP error: {error_detail}")
                    except:
                        self.log_test("Fresh OTP Verification Flow", True, f"‚úÖ OTP verification endpoint accessible for {target_phone}")
                elif otp_response and otp_response.status_code == 200:
                    # Unexpected success with test OTP
                    self.log_test("Fresh OTP Verification Flow", False, f"‚ùå Test OTP should not succeed for {target_phone}")
                else:
                    self.log_test("Fresh OTP Verification Flow", False, f"‚ùå OTP verification flow not working properly for {target_phone}")
            else:
                self.log_test("Fresh Phone Verification", False, f"‚ùå Phone verification failed for {target_phone}: {message}")
        else:
            error_msg = "Phone verification request failed"
            if response:
                try:
                    error_data = response.json()
                    error_msg = f"Phone verification failed: {error_data.get('detail', 'Unknown error')}"
                except:
                    error_msg = f"Phone verification failed with status {response.status_code}"
            self.log_test("Fresh Phone Verification", False, error_msg)
        
        # Step 5: Confirm WhatsApp integration is ready for this number
        print(f"\nüîó STEP 5: Confirming WhatsApp integration readiness for {target_phone}")
        response = self.make_request("GET", "/whatsapp/status")
        if response and response.status_code == 200:
            data = response.json()
            whatsapp_number = data.get("whatsapp_number")
            sandbox_code = data.get("sandbox_code")
            status = data.get("status", "unknown")
            setup_instructions = data.get("setup_instructions", [])
            
            if status == "active" and whatsapp_number:
                self.log_test("WhatsApp Integration Ready", True, f"‚úÖ WhatsApp integration ready for {target_phone} - Number: {whatsapp_number}, Sandbox: {sandbox_code}")
                print(f"   üìã Setup Instructions Available: {len(setup_instructions)} steps")
            else:
                self.log_test("WhatsApp Integration Ready", False, f"‚ùå WhatsApp integration not ready - Status: {status}")
        else:
            self.log_test("WhatsApp Integration Check", False, "Failed to check WhatsApp integration status")
        
        return True
    
    def generate_cleanup_report(self):
        """Generate detailed cleanup report"""
        target_phone = "+919886763496"
        
        print(f"\n" + "="*80)
        print(f"üìã CLEANUP REPORT FOR {target_phone}")
        print("="*80)
        
        cleanup_tests = [
            "Target Phone Check", "Phone Number Unlink", "Fresh Phone Verification", 
            "Fresh OTP Verification Flow", "WhatsApp Integration Ready"
        ]
        
        cleanup_passed = 0
        cleanup_total = 0
        
        print("\nüîç DETAILED CLEANUP RESULTS:")
        for test_name in cleanup_tests:
            test_result = next((r for r in self.test_results if r["test"] == test_name), None)
            if test_result:
                cleanup_total += 1
                status = "‚úÖ" if test_result["success"] else "‚ùå"
                print(f"   {status} {test_name}: {test_result['message']}")
                if test_result["success"]:
                    cleanup_passed += 1
        
        if cleanup_total > 0:
            cleanup_success_rate = (cleanup_passed / cleanup_total) * 100
            print(f"\nüéØ CLEANUP SUCCESS RATE: {cleanup_success_rate:.1f}% ({cleanup_passed}/{cleanup_total})")
            
            print(f"\nüìä CLEANUP STATUS SUMMARY:")
            if cleanup_success_rate >= 80:
                print(f"   ‚úÖ PHONE NUMBER {target_phone}: READY FOR FRESH TESTING")
                print(f"   ‚úÖ Phone number has been successfully cleaned from the system")
                print(f"   ‚úÖ Fresh phone verification flow is operational")
                print(f"   ‚úÖ WhatsApp integration is ready for testing")
            elif cleanup_success_rate >= 60:
                print(f"   ‚ö†Ô∏è  PHONE NUMBER {target_phone}: PARTIALLY CLEANED")
                print(f"   ‚ö†Ô∏è  Some cleanup steps successful, minor issues detected")
                print(f"   ‚ö†Ô∏è  Phone number may still be usable for testing")
            else:
                print(f"   ‚ùå PHONE NUMBER {target_phone}: CLEANUP ISSUES DETECTED")
                print(f"   ‚ùå Multiple cleanup steps failed")
                print(f"   ‚ùå Phone number may not be ready for fresh testing")
            
            return cleanup_success_rate
        else:
            print("‚ùå No cleanup tests were executed")
            return 0

def main():
    """Main cleanup execution"""
    print("üßπ PHONE NUMBER CLEANUP PROCESS - +919886763496")
    print("üéØ Target Backend: https://budget-planner-backendjuly.onrender.com")
    print("üîß Focus: Execute comprehensive phone number cleanup")
    print("="*80)
    
    tester = PhoneCleanupTester()
    
    # Step 1: Authenticate
    if not tester.authenticate():
        print("‚ùå Authentication failed - cannot proceed with cleanup")
        return False
    
    # Step 2: Execute cleanup process
    cleanup_executed = tester.test_phone_number_cleanup()
    
    if not cleanup_executed:
        print("‚ùå Cleanup process failed to execute")
        return False
    
    # Step 3: Generate report
    success_rate = tester.generate_cleanup_report()
    
    # Step 4: Final assessment
    print(f"\n" + "="*80)
    print("üèÅ FINAL CLEANUP ASSESSMENT")
    print("="*80)
    
    if success_rate >= 80:
        print("üéâ CLEANUP SUCCESSFUL!")
        print(f"‚úÖ Phone number +919886763496 is ready for fresh WhatsApp integration testing")
        print(f"‚úÖ All cleanup steps completed successfully")
        print(f"‚úÖ User can proceed with live testing")
        return True
    elif success_rate >= 60:
        print("‚ö†Ô∏è  CLEANUP PARTIALLY SUCCESSFUL")
        print(f"‚ö†Ô∏è  Phone number +919886763496 may be usable but has some issues")
        print(f"‚ö†Ô∏è  Review failed steps before proceeding with testing")
        return True
    else:
        print("‚ùå CLEANUP FAILED")
        print(f"‚ùå Phone number +919886763496 has significant issues")
        print(f"‚ùå Manual intervention may be required")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)